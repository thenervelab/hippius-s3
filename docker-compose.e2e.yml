services:
  base:
    image: hippius-s3-base:latest
    build:
      context: .
      dockerfile: Dockerfile.base
    profiles:
      - build-base
  api:
    build: .
    env_file:
      - .env.test
      - .env.test-e2e
    depends_on:
      db:
        condition: service_healthy
      ipfs:
        condition: service_started
      redis:
        condition: service_healthy
      redis-accounts:
        condition: service_healthy
      redis-chain:
        condition: service_healthy
      redis-rate-limiting:
        condition: service_healthy
    volumes:
      - .:/app
      - ./.e2e/dlq:/tmp/hippius_dlq
      - ./.e2e/dlq_archive:/tmp/hippius_dlq_archive
    networks:
      - hippius_net

  uploader:
    build:
      context: .
      dockerfile: workers/Dockerfile
    command: ["python", "workers/run_uploader_in_loop.py"]
    env_file:
      - .env.test
      - .env.test-e2e
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./.e2e/dlq:/tmp/hippius_dlq
      - ./.e2e/dlq_archive:/tmp/hippius_dlq_archive
    networks:
      - hippius_net

  substrate:
    build:
      context: .
      dockerfile: workers/Dockerfile
    command: ["python", "workers/run_substrate_in_loop.py"]
    env_file:
      - .env.test
      - .env.test-e2e
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - hippius_net

  unpinner:
    build:
      context: .
      dockerfile: workers/Dockerfile
    command: ["python", "workers/run_unpinner_in_loop.py"]
    env_file:
      - .env.test
      - .env.test-e2e
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - hippius_net

  downloader:
    build:
      context: .
      dockerfile: workers/Dockerfile
    command: ["python", "workers/run_downloader_in_loop.py"]
    env_file:
      - .env.test
      - .env.test-e2e
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - hippius_net

  chain-pin-checker:
    build:
      context: .
      dockerfile: workers/Dockerfile
    command: ["python", "workers/chain_pin_checker.py"]
    env_file:
      - .env.test
      - .env.test-e2e
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - hippius_net

  toxiproxy:
    image: shopify/toxiproxy:latest
    ports:
      - "8474:8474"
    depends_on:
      - ipfs
    networks:
      - hippius_net

  chain-profile-cacher:
    build:
      context: .
      dockerfile: workers/Dockerfile
    command: ["python", "workers/chain_profile_cacher.py"]
    env_file:
      - .env.test
      - .env.test-e2e
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app

  db:
    image: postgres:15
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hippius
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - hippius_net

  ipfs:
    image: ipfs/kubo:latest
    # No host port bindings needed for CI; services use internal DNS
    environment:
      - IPFS_PROFILE=server
    healthcheck:
      test: ["CMD-SHELL", "ipfs id"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - hippius_net

  redis:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
    networks:
      - hippius_net

  redis-accounts:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
    networks:
      - hippius_net

  redis-chain:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6381:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
    networks:
      - hippius_net

  redis-rate-limiting:
    image: redis:7-alpine
    ports:
      - "127.0.0.1:6383:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
    networks:
      - hippius_net

networks:
  hippius_net:
    name: hippius_net
