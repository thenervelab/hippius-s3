name: Deploy to Production

on:
  push:
    branches: [ production ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DEPLOYMENT_SSH_KEY }}

    - name: Setup known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.DEPLOYMENT_IP }} >> ~/.ssh/known_hosts

    - name: Deploy to production
      env:
        DEPLOYMENT_IP: ${{ secrets.DEPLOYMENT_IP }}
        DEPLOYMENT_USER: ${{ secrets.DEPLOYMENT_USER }}
        DEPLOYMENT_PATH: ${{ secrets.DEPLOYMENT_PATH }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git
      run: |
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "Deploying Hippius-S3 to production server..."

        # Make sure the deployment path exists
        mkdir -p $DEPLOYMENT_PATH
        cd $DEPLOYMENT_PATH || { echo "Failed to change to deployment path"; exit 1; }

        # Check if this is a git repository
        if [ ! -d ".git" ]; then
          echo "No git repository found. Initializing..."
          # Clone the repository if it's not already there
          git clone -b production $REPO_URL .
        else
          echo "Updating git repository..."
          # Try to pull latest changes
          git fetch origin production
          git checkout production || git checkout -b production origin/production
          git pull origin production
        fi

        echo "Creating .env file..."
        cat > .env << ENVEOF
        DATABASE_URL=${DATABASE_URL}
        DEBUG=false
        ENVEOF

        echo "Building and starting Docker containers..."
        docker compose down || true
        docker compose build --no-cache
        docker compose up -d

        echo "Waiting for database to be ready..."
        sleep 10

        echo "Running database migrations..."
        docker compose exec -T api dbmate up

        echo "Deployment completed successfully!"
        EOF
        chmod +x deploy.sh
        scp deploy.sh ${DEPLOYMENT_USER}@${DEPLOYMENT_IP}:/tmp/deploy.sh
        ssh ${DEPLOYMENT_USER}@${DEPLOYMENT_IP} "DEPLOYMENT_PATH=${DEPLOYMENT_PATH} DATABASE_URL=${DATABASE_URL} REPO_URL=${REPO_URL} bash /tmp/deploy.sh"
        ssh ${DEPLOYMENT_USER}@${DEPLOYMENT_IP} "rm /tmp/deploy.sh"

    - name: Verify deployment
      env:
        DEPLOYMENT_IP: ${{ secrets.DEPLOYMENT_IP }}
        DEPLOYMENT_USER: ${{ secrets.DEPLOYMENT_USER }}
        DEPLOYMENT_PATH: ${{ secrets.DEPLOYMENT_PATH }}
      run: |
        ssh ${DEPLOYMENT_USER}@${DEPLOYMENT_IP} "cd ${DEPLOYMENT_PATH} && docker compose ps"
